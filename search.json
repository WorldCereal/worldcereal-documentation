[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ESA WorldCereal documentation portal",
    "section": "",
    "text": "ESA WorldCereal documentation portal\nThis portal documents the design of the WorldCereal system.\nCode samples in this portal are meant to document the design, but in general are not working. As openEO code is relatively concise, they serve as workflow descriptions and to render workflow diagrams in the form of openEO process graphs.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "design/reference_data_module.html",
    "href": "design/reference_data_module.html",
    "title": "H3 indexing",
    "section": "",
    "text": "While the RDM is built on top of a PostGIS database, we more and more start to use H3 for fast geospatial lookup. H3 is a discrete global grid system, with some nice properties for cases like ours.\nOne example use case is creating a heatmap showing distribution of samples for specific crop types over the world.\nH3 indexes can also be computed on the fly from the geometry, but a lot of operations can be made faster if they are performed on 64bit integers rather than geometries.",
    "crumbs": [
      "System design",
      "Reference Data Module"
    ]
  },
  {
    "objectID": "design/reference_data_module.html#reading-test-from-parquet",
    "href": "design/reference_data_module.html#reading-test-from-parquet",
    "title": "H3 indexing",
    "section": "Reading test from Parquet",
    "text": "Reading test from Parquet\n\n%%time\nimport geopandas as gpd\nimport fsspec\npq_path = \"https://ewocstorage.blob.core.windows.net/collections/2021_PT_EUROCROP_POLY_110.parquet\"\nwith fsspec.open(pq_path) as file:\n    df = gpd.read_parquet(file,columns=[\"geometry\",\"CT\"])\ndf\n\nCPU times: user 909 ms, sys: 305 ms, total: 1.21 s\nWall time: 17.3 s\n\n\n\n\n\n\n\n\n\n\ngeometry\nCT\n\n\n\n\n0\nMULTIPOLYGON (((-8.54796 40.56554, -8.54942 40...\n1200\n\n\n1\nMULTIPOLYGON (((-8.52352 40.55686, -8.52352 40...\n1700\n\n\n2\nMULTIPOLYGON (((-8.52456 40.55538, -8.52454 40...\n3300\n\n\n3\nMULTIPOLYGON (((-8.52835 40.56835, -8.52837 40...\n2000\n\n\n4\nMULTIPOLYGON (((-8.52781 40.57128, -8.52814 40...\n0\n\n\n...\n...\n...\n\n\n99995\nMULTIPOLYGON (((-6.46866 41.43669, -6.46832 41...\n0\n\n\n99996\nMULTIPOLYGON (((-6.46797 41.43497, -6.46778 41...\n0\n\n\n99997\nMULTIPOLYGON (((-7.45134 41.73074, -7.45134 41...\n1200\n\n\n99998\nMULTIPOLYGON (((-6.47482 41.44217, -6.47480 41...\n0\n\n\n99999\nMULTIPOLYGON (((-6.47503 41.44182, -6.47504 41...\n9520\n\n\n\n\n100000 rows × 2 columns\n\n\n\n\n\ndf.groupby(['CT']).count()\n\n\n\n\n\n\n\n\n\ngeometry\n\n\nCT\n\n\n\n\n\n0\n37673\n\n\n1100\n191\n\n\n1200\n4475\n\n\n1300\n271\n\n\n1500\n69\n\n\n...\n...\n\n\n9300\n10\n\n\n9320\n3\n\n\n9500\n8\n\n\n9520\n971\n\n\n9920\n4\n\n\n\n\n61 rows × 1 columns\n\n\n\n\n\n%%time\nimport duckdb\ndb = duckdb.connect()\ndb.execute('select count(*) from read_parquet(\"https://ewocstorage.blob.core.windows.net/collections/2021_PT_EUROCROP_POLY_110.parquet\")').fetchall()\n\nCPU times: user 255 ms, sys: 4.75 ms, total: 260 ms\nWall time: 294 ms\n\n\n[(100000,)]\n\n\n\n%%time \ndb.query('select CT,count(*) from read_parquet(\"https://ewocstorage.blob.core.windows.net/collections/2021_PT_EUROCROP_POLY_110.parquet\") GROUP BY CT').to_df()\n\nCPU times: user 48.1 ms, sys: 17.3 ms, total: 65.3 ms\nWall time: 597 ms\n\n\n\n\n\n\n\n\n\n\nCT\ncount_star()\n\n\n\n\n0\n9100\n21039\n\n\n1\n2000\n1976\n\n\n2\n3530\n153\n\n\n3\n7100\n188\n\n\n4\n4380\n11\n\n\n...\n...\n...\n\n\n56\n1200\n4475\n\n\n57\n9520\n971\n\n\n58\n7300\n16\n\n\n59\n2190\n1\n\n\n60\n3490\n4\n\n\n\n\n61 rows × 2 columns\n\n\n\n\n\ndb.execute('INSTALL spatial;LOAD spatial;')\n\n&lt;duckdb.duckdb.DuckDBPyConnection at 0x70e94825ff30&gt;\n\n\n\n%%time\ndb.query('select ST_centroid(ST_GeomFromWKB(geometry)) from read_parquet(\"https://ewocstorage.blob.core.windows.net/collections/2021_PT_EUROCROP_POLY_110.parquet\") USING SAMPLE 100 ROWS ').to_df()\n\n\n\n\nCPU times: user 4.88 s, sys: 92.6 ms, total: 4.97 s\nWall time: 11.8 s\n\n\n\n\n\n\n\n\n\n\nst_centroid(st_geomfromwkb(geometry))\n\n\n\n\n0\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n1\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n2\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n3\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n4\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n...\n...\n\n\n95\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n96\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n97\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n98\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n99\n[0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,...\n\n\n\n\n100 rows × 1 columns\n\n\n\n\n\nGeoParquet vs OGC Features\nAs shown above, both DuckDB and GeoPandas can efficiently handle Parquet files of 100k items stored on https. With parquet as interface, data scientists can write complex queries in a language they know (Pandas, SQL, …).\nWhen looking at OGC features, it seems there are hardly any libraries available. Some basic support in GDAL seems to be the best option to connect with it. To benefit from server side processing power, the most comfortable option seems to write CQL filters. OGC Features does not support aggregation, so a ‘group by’ operation is not supported.\nNote: GeoParquet is on track to be adopted as an OGC standard, hence satisfies standardization requirements.",
    "crumbs": [
      "System design",
      "Reference Data Module"
    ]
  },
  {
    "objectID": "design/extractions.html",
    "href": "design/extractions.html",
    "title": "WorldCereal Documentation",
    "section": "",
    "text": "The first level cache is a collection of netCDF raster files, all with a fixed size of e.g. 64x64 pixels.\n\n\n\n\nGet id of extraction to run\nFor extraction id get point locations from RDM\nUse UDF to convert points into 64x64 patches\n\n\n\n\n\nnetCDF assets need to link back to the sample from which they were generated.\na ‘Ground truth’ asset contains the raster with ground truth info, meaning the croptype code.\nSentinel-2 asset at 10m resolution.\nSentinel-1 asset at 20m resolution.\nAgERA5 asset\n\nSTAC extensions: - projection (proj) provides detailed info on raster size and projection system\n\n\n{\n  \"description\": \"The Level 1 input data cache contains extracted samples of EO data. It's main use is model calibration, allowing faster iterations by providing a cache.\",\n  \"extent\": {\n    \"spatial\": {\n      \"bbox\": [\n        [\n          4.053457,\n          51.01616,\n          4.129008,\n          51.049831\n        ]\n      ]\n    },\n    \"temporal\": {\n      \"interval\": [\n        [\n          \"2020-05-01T00:00:00Z\",\n          \"2020-05-22T00:00:00Z\"\n        ]\n      ]\n    }\n  },\n  \"id\": \"L1_CACHE\",\n  \"license\": \"CC-BY-4.0\",\n  \"links\": [],\n  \"providers\": [\n    {\n      \"description\": \"This data was processed on an openEO backend maintained by VITO.\",\n      \"name\": \"VITO\",\n      \"processing:facility\": \"openEO Geotrellis backend\",\n      \"processing:software\": {\n        \"Geotrellis backend\": \"0.27.0a1\"\n      },\n      \"roles\": [\n        \"processor\"\n      ]\n    }\n  ],\n  \"stac_extensions\": [\n    \"https://stac-extensions.github.io/eo/v1.1.0/schema.json\",\n    \"https://stac-extensions.github.io/file/v2.1.0/schema.json\",\n    \"https://stac-extensions.github.io/processing/v1.1.0/schema.json\",\n    \"https://stac-extensions.github.io/projection/v1.1.0/schema.json\"\n  ],\n  \"stac_version\": \"1.0.0\",\n  \"summaries\": {\n    \"constellation\": [\n      \"sentinel-2\"\n    ],\n    \"instruments\": [\n      \"msi\"\n    ],\n    \"gsd\": [\n      10,\n      20,\n      60\n    ],\n    \"platform\": [\n      \"sentinel-2a\",\n      \"sentinel-2b\"\n    ]\n  },\n  \"title\": \"WorldCereal Level 1 cache\",\n  \"type\": \"Collection\",\n  \"cube:dimensions\": {\n    \"x\": {\n      \"type\": \"spatial\",\n      \"axis\": \"x\",\n      \"step\": 10,\n      \"reference_system\": {\n        \"$schema\": \"https://proj.org/schemas/v0.2/projjson.schema.json\",\n        \"area\": \"World\",\n        \"bbox\": {\n          \"east_longitude\": 180,\n          \"north_latitude\": 90,\n          \"south_latitude\": -90,\n          \"west_longitude\": -180\n        },\n        \"coordinate_system\": {\n          \"axis\": [\n            {\n              \"abbreviation\": \"Lat\",\n              \"direction\": \"north\",\n              \"name\": \"Geodetic latitude\",\n              \"unit\": \"degree\"\n            },\n            {\n              \"abbreviation\": \"Lon\",\n              \"direction\": \"east\",\n              \"name\": \"Geodetic longitude\",\n              \"unit\": \"degree\"\n            }\n          ],\n          \"subtype\": \"ellipsoidal\"\n        },\n        \"datum\": {\n          \"ellipsoid\": {\n            \"inverse_flattening\": 298.257223563,\n            \"name\": \"WGS 84\",\n            \"semi_major_axis\": 6378137\n          },\n          \"name\": \"World Geodetic System 1984\",\n          \"type\": \"GeodeticReferenceFrame\"\n        },\n        \"id\": {\n          \"authority\": \"OGC\",\n          \"code\": \"Auto42001\",\n          \"version\": \"1.3\"\n        },\n        \"name\": \"AUTO 42001 (Universal Transverse Mercator)\",\n        \"type\": \"GeodeticCRS\"\n      }\n    },\n    \"y\": {\n      \"type\": \"spatial\",\n      \"axis\": \"y\",\n      \"step\": 10,\n      \"reference_system\": {\n        \"$schema\": \"https://proj.org/schemas/v0.2/projjson.schema.json\",\n        \"area\": \"World\",\n        \"bbox\": {\n          \"east_longitude\": 180,\n          \"north_latitude\": 90,\n          \"south_latitude\": -90,\n          \"west_longitude\": -180\n        },\n        \"coordinate_system\": {\n          \"axis\": [\n            {\n              \"abbreviation\": \"Lat\",\n              \"direction\": \"north\",\n              \"name\": \"Geodetic latitude\",\n              \"unit\": \"degree\"\n            },\n            {\n              \"abbreviation\": \"Lon\",\n              \"direction\": \"east\",\n              \"name\": \"Geodetic longitude\",\n              \"unit\": \"degree\"\n            }\n          ],\n          \"subtype\": \"ellipsoidal\"\n        },\n        \"datum\": {\n          \"ellipsoid\": {\n            \"inverse_flattening\": 298.257223563,\n            \"name\": \"WGS 84\",\n            \"semi_major_axis\": 6378137\n          },\n          \"name\": \"World Geodetic System 1984\",\n          \"type\": \"GeodeticReferenceFrame\"\n        },\n        \"id\": {\n          \"authority\": \"OGC\",\n          \"code\": \"Auto42001\",\n          \"version\": \"1.3\"\n        },\n        \"name\": \"AUTO 42001 (Universal Transverse Mercator)\",\n        \"type\": \"GeodeticCRS\"\n      }\n    },\n    \"time\": {\n      \"type\": \"temporal\",\n      \"extent\": [\n        \"2015-06-23T00:00:00Z\",\n        \"2019-07-10T13:44:56Z\"\n      ],\n      \"step\": \"P5D\"\n    },\n    \"spectral\": {\n      \"type\": \"bands\",\n      \"values\": [\n        \"SCL\",\n        \"B01\",\n        \"B02\",\n        \"B03\",\n        \"B04\",\n        \"B05\",\n        \"B06\",\n        \"B07\",\n        \"B08\",\n        \"B8A\",\n        \"B09\",\n        \"B10\",\n        \"B11\",\n        \"B12\",\n        \"CROPTYPE\"\n      ]\n    }\n  },\n  \"item_assets\": {\n    \"sentinel2\": {\n      \"gsd\": 10,\n      \"title\": \"Sentinel2\",\n      \"description\": \"Sentinel-2 bands\",\n      \"type\": \"application/x-netcdf\",\n      \"roles\": [\n        \"data\"\n      ],\n      \"proj:shape\": [\n        64,\n        64\n      ],\n      \"raster:bands\": [\n        {\n          \"name\": \"B01\"\n        },\n        {\n          \"name\": \"B02\"\n        }\n      ],\n      \"cube:variables\": {\n        \"B01\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B02\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B03\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B04\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B05\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B06\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B07\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B8A\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B08\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B11\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B12\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"SCL\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"}\n      },\n      \"eo:bands\": [\n        {\n          \"name\": \"B01\",\n          \"common_name\": \"coastal\",\n          \"center_wavelength\": 0.443,\n          \"full_width_half_max\": 0.027\n        },\n        {\n          \"name\": \"B02\",\n          \"common_name\": \"blue\",\n          \"center_wavelength\": 0.49,\n          \"full_width_half_max\": 0.098\n        },\n        {\n          \"name\": \"B03\",\n          \"common_name\": \"green\",\n          \"center_wavelength\": 0.56,\n          \"full_width_half_max\": 0.045\n        },\n        {\n          \"name\": \"B04\",\n          \"common_name\": \"red\",\n          \"center_wavelength\": 0.665,\n          \"full_width_half_max\": 0.038\n        },\n        {\n          \"name\": \"B05\",\n          \"common_name\": \"rededge\",\n          \"center_wavelength\": 0.704,\n          \"full_width_half_max\": 0.019\n        },\n        {\n          \"name\": \"B06\",\n          \"common_name\": \"rededge\",\n          \"center_wavelength\": 0.74,\n          \"full_width_half_max\": 0.018\n        },\n        {\n          \"name\": \"B07\",\n          \"common_name\": \"rededge\",\n          \"center_wavelength\": 0.783,\n          \"full_width_half_max\": 0.028\n        },\n        {\n          \"name\": \"B08\",\n          \"common_name\": \"nir\",\n          \"center_wavelength\": 0.842,\n          \"full_width_half_max\": 0.145\n        },\n        {\n          \"name\": \"B8A\",\n          \"common_name\": \"nir08\",\n          \"center_wavelength\": 0.865,\n          \"full_width_half_max\": 0.033\n        },\n        {\n          \"name\": \"B11\",\n          \"common_name\": \"swir16\",\n          \"center_wavelength\": 1.61,\n          \"full_width_half_max\": 0.143\n        },\n        {\n          \"name\": \"B12\",\n          \"common_name\": \"swir22\",\n          \"center_wavelength\": 2.19,\n          \"full_width_half_max\": 0.242\n        }\n      ]\n    },\n    \"auxiliary\": {\n      \"title\": \"ground truth data\",\n      \"description\": \"This asset contains the crop type codes.\",\n      \"type\": \"application/x-netcdf\",\n      \"roles\": [\n        \"data\"\n      ],\n      \"proj:shape\": [\n        64,\n        64\n      ],\n      \"raster:bands\": [\n        {\n          \"name\": \"CROPTYPE\",\n          \"data_type\": \"uint16\",\n          \"bits_per_sample\": 16\n        }\n      ]\n    },\n    \"sentinel1\": {},\n    \"agera5\": {}\n  }\n}",
    "crumbs": [
      "System design",
      "Extractions"
    ]
  },
  {
    "objectID": "design/extractions.html#extractions-cache",
    "href": "design/extractions.html#extractions-cache",
    "title": "WorldCereal Documentation",
    "section": "",
    "text": "The first level cache is a collection of netCDF raster files, all with a fixed size of e.g. 64x64 pixels.\n\n\n\n\nGet id of extraction to run\nFor extraction id get point locations from RDM\nUse UDF to convert points into 64x64 patches\n\n\n\n\n\nnetCDF assets need to link back to the sample from which they were generated.\na ‘Ground truth’ asset contains the raster with ground truth info, meaning the croptype code.\nSentinel-2 asset at 10m resolution.\nSentinel-1 asset at 20m resolution.\nAgERA5 asset\n\nSTAC extensions: - projection (proj) provides detailed info on raster size and projection system\n\n\n{\n  \"description\": \"The Level 1 input data cache contains extracted samples of EO data. It's main use is model calibration, allowing faster iterations by providing a cache.\",\n  \"extent\": {\n    \"spatial\": {\n      \"bbox\": [\n        [\n          4.053457,\n          51.01616,\n          4.129008,\n          51.049831\n        ]\n      ]\n    },\n    \"temporal\": {\n      \"interval\": [\n        [\n          \"2020-05-01T00:00:00Z\",\n          \"2020-05-22T00:00:00Z\"\n        ]\n      ]\n    }\n  },\n  \"id\": \"L1_CACHE\",\n  \"license\": \"CC-BY-4.0\",\n  \"links\": [],\n  \"providers\": [\n    {\n      \"description\": \"This data was processed on an openEO backend maintained by VITO.\",\n      \"name\": \"VITO\",\n      \"processing:facility\": \"openEO Geotrellis backend\",\n      \"processing:software\": {\n        \"Geotrellis backend\": \"0.27.0a1\"\n      },\n      \"roles\": [\n        \"processor\"\n      ]\n    }\n  ],\n  \"stac_extensions\": [\n    \"https://stac-extensions.github.io/eo/v1.1.0/schema.json\",\n    \"https://stac-extensions.github.io/file/v2.1.0/schema.json\",\n    \"https://stac-extensions.github.io/processing/v1.1.0/schema.json\",\n    \"https://stac-extensions.github.io/projection/v1.1.0/schema.json\"\n  ],\n  \"stac_version\": \"1.0.0\",\n  \"summaries\": {\n    \"constellation\": [\n      \"sentinel-2\"\n    ],\n    \"instruments\": [\n      \"msi\"\n    ],\n    \"gsd\": [\n      10,\n      20,\n      60\n    ],\n    \"platform\": [\n      \"sentinel-2a\",\n      \"sentinel-2b\"\n    ]\n  },\n  \"title\": \"WorldCereal Level 1 cache\",\n  \"type\": \"Collection\",\n  \"cube:dimensions\": {\n    \"x\": {\n      \"type\": \"spatial\",\n      \"axis\": \"x\",\n      \"step\": 10,\n      \"reference_system\": {\n        \"$schema\": \"https://proj.org/schemas/v0.2/projjson.schema.json\",\n        \"area\": \"World\",\n        \"bbox\": {\n          \"east_longitude\": 180,\n          \"north_latitude\": 90,\n          \"south_latitude\": -90,\n          \"west_longitude\": -180\n        },\n        \"coordinate_system\": {\n          \"axis\": [\n            {\n              \"abbreviation\": \"Lat\",\n              \"direction\": \"north\",\n              \"name\": \"Geodetic latitude\",\n              \"unit\": \"degree\"\n            },\n            {\n              \"abbreviation\": \"Lon\",\n              \"direction\": \"east\",\n              \"name\": \"Geodetic longitude\",\n              \"unit\": \"degree\"\n            }\n          ],\n          \"subtype\": \"ellipsoidal\"\n        },\n        \"datum\": {\n          \"ellipsoid\": {\n            \"inverse_flattening\": 298.257223563,\n            \"name\": \"WGS 84\",\n            \"semi_major_axis\": 6378137\n          },\n          \"name\": \"World Geodetic System 1984\",\n          \"type\": \"GeodeticReferenceFrame\"\n        },\n        \"id\": {\n          \"authority\": \"OGC\",\n          \"code\": \"Auto42001\",\n          \"version\": \"1.3\"\n        },\n        \"name\": \"AUTO 42001 (Universal Transverse Mercator)\",\n        \"type\": \"GeodeticCRS\"\n      }\n    },\n    \"y\": {\n      \"type\": \"spatial\",\n      \"axis\": \"y\",\n      \"step\": 10,\n      \"reference_system\": {\n        \"$schema\": \"https://proj.org/schemas/v0.2/projjson.schema.json\",\n        \"area\": \"World\",\n        \"bbox\": {\n          \"east_longitude\": 180,\n          \"north_latitude\": 90,\n          \"south_latitude\": -90,\n          \"west_longitude\": -180\n        },\n        \"coordinate_system\": {\n          \"axis\": [\n            {\n              \"abbreviation\": \"Lat\",\n              \"direction\": \"north\",\n              \"name\": \"Geodetic latitude\",\n              \"unit\": \"degree\"\n            },\n            {\n              \"abbreviation\": \"Lon\",\n              \"direction\": \"east\",\n              \"name\": \"Geodetic longitude\",\n              \"unit\": \"degree\"\n            }\n          ],\n          \"subtype\": \"ellipsoidal\"\n        },\n        \"datum\": {\n          \"ellipsoid\": {\n            \"inverse_flattening\": 298.257223563,\n            \"name\": \"WGS 84\",\n            \"semi_major_axis\": 6378137\n          },\n          \"name\": \"World Geodetic System 1984\",\n          \"type\": \"GeodeticReferenceFrame\"\n        },\n        \"id\": {\n          \"authority\": \"OGC\",\n          \"code\": \"Auto42001\",\n          \"version\": \"1.3\"\n        },\n        \"name\": \"AUTO 42001 (Universal Transverse Mercator)\",\n        \"type\": \"GeodeticCRS\"\n      }\n    },\n    \"time\": {\n      \"type\": \"temporal\",\n      \"extent\": [\n        \"2015-06-23T00:00:00Z\",\n        \"2019-07-10T13:44:56Z\"\n      ],\n      \"step\": \"P5D\"\n    },\n    \"spectral\": {\n      \"type\": \"bands\",\n      \"values\": [\n        \"SCL\",\n        \"B01\",\n        \"B02\",\n        \"B03\",\n        \"B04\",\n        \"B05\",\n        \"B06\",\n        \"B07\",\n        \"B08\",\n        \"B8A\",\n        \"B09\",\n        \"B10\",\n        \"B11\",\n        \"B12\",\n        \"CROPTYPE\"\n      ]\n    }\n  },\n  \"item_assets\": {\n    \"sentinel2\": {\n      \"gsd\": 10,\n      \"title\": \"Sentinel2\",\n      \"description\": \"Sentinel-2 bands\",\n      \"type\": \"application/x-netcdf\",\n      \"roles\": [\n        \"data\"\n      ],\n      \"proj:shape\": [\n        64,\n        64\n      ],\n      \"raster:bands\": [\n        {\n          \"name\": \"B01\"\n        },\n        {\n          \"name\": \"B02\"\n        }\n      ],\n      \"cube:variables\": {\n        \"B01\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B02\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B03\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B04\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B05\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B06\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B07\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B8A\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B08\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B11\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"B12\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"},\n        \"SCL\": {\"dimensions\": [\"time\",\"y\",\"x\"],\"type\": \"data\"}\n      },\n      \"eo:bands\": [\n        {\n          \"name\": \"B01\",\n          \"common_name\": \"coastal\",\n          \"center_wavelength\": 0.443,\n          \"full_width_half_max\": 0.027\n        },\n        {\n          \"name\": \"B02\",\n          \"common_name\": \"blue\",\n          \"center_wavelength\": 0.49,\n          \"full_width_half_max\": 0.098\n        },\n        {\n          \"name\": \"B03\",\n          \"common_name\": \"green\",\n          \"center_wavelength\": 0.56,\n          \"full_width_half_max\": 0.045\n        },\n        {\n          \"name\": \"B04\",\n          \"common_name\": \"red\",\n          \"center_wavelength\": 0.665,\n          \"full_width_half_max\": 0.038\n        },\n        {\n          \"name\": \"B05\",\n          \"common_name\": \"rededge\",\n          \"center_wavelength\": 0.704,\n          \"full_width_half_max\": 0.019\n        },\n        {\n          \"name\": \"B06\",\n          \"common_name\": \"rededge\",\n          \"center_wavelength\": 0.74,\n          \"full_width_half_max\": 0.018\n        },\n        {\n          \"name\": \"B07\",\n          \"common_name\": \"rededge\",\n          \"center_wavelength\": 0.783,\n          \"full_width_half_max\": 0.028\n        },\n        {\n          \"name\": \"B08\",\n          \"common_name\": \"nir\",\n          \"center_wavelength\": 0.842,\n          \"full_width_half_max\": 0.145\n        },\n        {\n          \"name\": \"B8A\",\n          \"common_name\": \"nir08\",\n          \"center_wavelength\": 0.865,\n          \"full_width_half_max\": 0.033\n        },\n        {\n          \"name\": \"B11\",\n          \"common_name\": \"swir16\",\n          \"center_wavelength\": 1.61,\n          \"full_width_half_max\": 0.143\n        },\n        {\n          \"name\": \"B12\",\n          \"common_name\": \"swir22\",\n          \"center_wavelength\": 2.19,\n          \"full_width_half_max\": 0.242\n        }\n      ]\n    },\n    \"auxiliary\": {\n      \"title\": \"ground truth data\",\n      \"description\": \"This asset contains the crop type codes.\",\n      \"type\": \"application/x-netcdf\",\n      \"roles\": [\n        \"data\"\n      ],\n      \"proj:shape\": [\n        64,\n        64\n      ],\n      \"raster:bands\": [\n        {\n          \"name\": \"CROPTYPE\",\n          \"data_type\": \"uint16\",\n          \"bits_per_sample\": 16\n        }\n      ]\n    },\n    \"sentinel1\": {},\n    \"agera5\": {}\n  }\n}",
    "crumbs": [
      "System design",
      "Extractions"
    ]
  },
  {
    "objectID": "design/inference.html",
    "href": "design/inference.html",
    "title": "WorldCereal inference",
    "section": "",
    "text": "The pseudo code below outlines the general steps of the inference pipeline.\n\nimport  openeo\nfrom    openeo.rest.mlmodel import MlModel\nfrom    openeo.processes import ProcessBuilder\n\nconnection = openeo.connect(\"openeo.dataspace.copernicus.eu\")\n1l2A = connection.load_collection(\"SENTINEL2_L2A\").aggregate_temporal_period(period=\"month\",reducer=\"mean\")\nsentinel1 = connection.load_collection(\"SENTINEL1_GRD\")\nbs = sentinel1.sar_backscatter(coefficient=\"sigma0-ellipsoid\").resample_spatial(resolution=20).aggregate_temporal_period(period=\"month\",reducer=\"mean\")\n\n2\n\nfrom    openeo import UDF\nfeature_udf=UDF(code=\"\",runtime=\"Python\") #load UDF to compute presto features based on monthly timeseries\nfeatures_cube = l2A.merge_cubes(bs).apply_dimension(dimension='t',process=feature_udf,target_dimension='bands')\n\n\nmodel = MlModel.load_ml_model(connection=connection, id=\"http://myhost.com/my_catboost_stac_metadata.json\")\n\ncatboost_classifier = lambda data, context: ProcessBuilder.process(\"predict_catboost\",data=data, model=context)\nworldcereal_product = features_cube.reduce_dimension(dimension=\"bands\", reducer=catboost_classifier, context=model)\n\nworldcereal_product\n\n\n1\n\ninstead of aggregate_temporal, we’ll do more advanced compositing, such as max-NDVI\n\n2\n\nwe’ll need to add agera5 and dem bands\n\n\n\n\n\n\n\n    \n    \n        \n    \n    \n\n\nFigure 1: The WorldCereal inference pipeline",
    "crumbs": [
      "System design",
      "Inference"
    ]
  },
  {
    "objectID": "design/inference.html#full-inference-workflow",
    "href": "design/inference.html#full-inference-workflow",
    "title": "WorldCereal inference",
    "section": "",
    "text": "The pseudo code below outlines the general steps of the inference pipeline.\n\nimport  openeo\nfrom    openeo.rest.mlmodel import MlModel\nfrom    openeo.processes import ProcessBuilder\n\nconnection = openeo.connect(\"openeo.dataspace.copernicus.eu\")\n1l2A = connection.load_collection(\"SENTINEL2_L2A\").aggregate_temporal_period(period=\"month\",reducer=\"mean\")\nsentinel1 = connection.load_collection(\"SENTINEL1_GRD\")\nbs = sentinel1.sar_backscatter(coefficient=\"sigma0-ellipsoid\").resample_spatial(resolution=20).aggregate_temporal_period(period=\"month\",reducer=\"mean\")\n\n2\n\nfrom    openeo import UDF\nfeature_udf=UDF(code=\"\",runtime=\"Python\") #load UDF to compute presto features based on monthly timeseries\nfeatures_cube = l2A.merge_cubes(bs).apply_dimension(dimension='t',process=feature_udf,target_dimension='bands')\n\n\nmodel = MlModel.load_ml_model(connection=connection, id=\"http://myhost.com/my_catboost_stac_metadata.json\")\n\ncatboost_classifier = lambda data, context: ProcessBuilder.process(\"predict_catboost\",data=data, model=context)\nworldcereal_product = features_cube.reduce_dimension(dimension=\"bands\", reducer=catboost_classifier, context=model)\n\nworldcereal_product\n\n\n1\n\ninstead of aggregate_temporal, we’ll do more advanced compositing, such as max-NDVI\n\n2\n\nwe’ll need to add agera5 and dem bands\n\n\n\n\n\n\n\n    \n    \n        \n    \n    \n\n\nFigure 1: The WorldCereal inference pipeline",
    "crumbs": [
      "System design",
      "Inference"
    ]
  },
  {
    "objectID": "design/inference.html#exporting-results-to-workspace",
    "href": "design/inference.html#exporting-results-to-workspace",
    "title": "WorldCereal inference",
    "section": "Exporting results to workspace",
    "text": "Exporting results to workspace\nWhen a product is ready, we want to store it in object storage and adjust stac metadata.\n\nstac_metadata = worldcereal_product.save_result(format=\"GTiff\")\nstac_metadata = connection.datacube_from_process(\"stac_update\",data = stac_metadata) #todo: add custom metadata\n\nconnection.datacube_from_process(\"export_workspace\",data = stac_metadata, workspace = \"my_workspace\", merge=\"pointer_to_worldcereal_collection\")\n\n\n\n\n    \n    \n        \n    \n    \n\n\nFigure 2: Workflow steps to export results to object storage",
    "crumbs": [
      "System design",
      "Inference"
    ]
  },
  {
    "objectID": "design/model_training.html",
    "href": "design/model_training.html",
    "title": "Preprocessing features",
    "section": "",
    "text": "Preprocessing aim is to generate a 2D data structure (a table) that can go into catboost training.",
    "crumbs": [
      "System design",
      "Training"
    ]
  },
  {
    "objectID": "design/model_training.html#extracting-private-samples",
    "href": "design/model_training.html#extracting-private-samples",
    "title": "Preprocessing features",
    "section": "Extracting private samples",
    "text": "Extracting private samples\nFor this use case, we assume that the user wants to use a private reference dataset. It should be available at a ‘secret’ url, which can be a signed url provided by the reference data module. Multiple input formats are supported by openEO next to GeoParquet, but the input data needs to be harmonized.\nWe immediately extract a table at point locations, assuming that the cache of intermediate patches has less value for private data.\nThe WorldCereal preprocessing chain is assumed to be available as an openEO User Defined Process (UDP) called worldcereal_preprocessing_udp.\n\nsample_locations = connection.load_url(\"https://rdm.worldcereal.org/private_assets/absqdfjq_signed_url/private_data.parquet\", format=\"Parquet\")\n\nconnection.datacube_from_process(\"worldcereal_preprocessing_udp\").aggregate_spatial(sample_locations,reducer=\"first\").save_result(format=\"Parquet\")",
    "crumbs": [
      "System design",
      "Training"
    ]
  },
  {
    "objectID": "design/model_training.html#training-by-combining-private-public-samples",
    "href": "design/model_training.html#training-by-combining-private-public-samples",
    "title": "Preprocessing features",
    "section": "Training by combining private + public samples",
    "text": "Training by combining private + public samples\nIn this usecase, the user wants to train a new model, by combining data. This should be possible by simply merging vector cubes that go into the training process.\nTODO",
    "crumbs": [
      "System design",
      "Training"
    ]
  }
]